package com.example.appmuabandocu.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.appmuabandocu.api.ApiClient
import com.example.appmuabandocu.data.District
import com.example.appmuabandocu.data.Province
import com.example.appmuabandocu.model.User
import com.example.appmuabandocu.data.Ward
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class AddressViewModel: ViewModel(){
    private val apiService = ApiClient.provinceService

    private val auth = FirebaseAuth.getInstance()
    private val firestore = FirebaseFirestore.getInstance()
    private val userCollection = firestore.collection("users")

    private val _provinces = MutableStateFlow<List<Province>>(emptyList())
    val provinces: StateFlow<List<Province>> = _provinces

    private val _districts = MutableStateFlow<List<District>>(emptyList())
    val districts: StateFlow<List<District>> = _districts

    private val _wards = MutableStateFlow<List<Ward>>(emptyList())
    val wards: StateFlow<List<Ward>> = _wards

    // üü¢ Kh·ªüi t·∫°o ViewModel v√† load danh s√°ch t·ªânh
    private val _selectedProvince = MutableStateFlow<Province?>(null)
    val selectedProvince: StateFlow<Province?> = _selectedProvince.asStateFlow()

    private val _selectedDistrict = MutableStateFlow<District?>(null)
    val selectedDistrict: StateFlow<District?> = _selectedDistrict.asStateFlow()

    private val _selectedWard = MutableStateFlow<Ward?>(null)
    val selectedWard: StateFlow<Ward?> = _selectedWard.asStateFlow()

    private val _streetAddress = MutableStateFlow("")
    val streetAddress: StateFlow<String> = _streetAddress.asStateFlow()

    // StateFlow cho th√¥ng tin ng∆∞·ªùi d√πng
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _message = MutableStateFlow<String?>(null)
    val message: StateFlow<String?> = _message.asStateFlow()

    // StateFlow cho ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
    private val _fullAddress = MutableStateFlow("")
    val fullAddress: StateFlow<String> = _fullAddress.asStateFlow()


    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ ƒë∆∞·ªùng ph·ªë
    fun setStreetAddress(address: String) {
        _streetAddress.value = address
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ch·ªçn t·ªânh
    fun selectProvince(province: Province) {
        _selectedProvince.value = province
        loadDistricts(province.code.toString())
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ch·ªçn qu·∫≠n/huy·ªán
    fun selectDistrict(district: District) {
        _selectedDistrict.value = district
        loadWards(district.code.toString())
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ch·ªçn x√£/ph∆∞·ªùng
    fun selectWard(ward: Ward) {
        _selectedWard.value = ward
    }

    init {
        loadProvinces() // üü¢ Load danh s√°ch t·ªânh khi ViewModel kh·ªüi t·∫°o
    }
    // üü¢ Load t·ªânh
    fun loadProvinces() {
        viewModelScope.launch {
            try {
                val response = apiService.getProvinces()
                _provinces.value = response
                if (response.isNotEmpty()) {
                    loadDistricts(response[0].code.toString()) // T·ª± ƒë·ªông load qu·∫≠n c·ªßa t·ªânh ƒë·∫ßu ti√™n
                } else {
                    Log.e("ViewModel", "Danh s√°ch t·ªânh tr·ªëng")
                }
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load t·ªânh: ${e.message}")
            }
        }
    }

    // üü¢ Load qu·∫≠n/huy·ªán b·∫±ng API ri√™ng (depth=2 cho province c·ª• th·ªÉ)
    fun loadDistricts(provinceCode: String) {
        viewModelScope.launch {
            try {
                val province = apiService.getProvinceByCode(provinceCode) // API: /api/p/{provinceCode}?depth=2
                _districts.value = province.districts ?: emptyList()

                if (_districts.value.isNotEmpty()) {
                    loadWards(_districts.value[0].code.toString())
                }
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load huy·ªán: ${e.message}")
            }
        }
    }

    // üü¢ Load x√£/ph∆∞·ªùng b·∫±ng API ri√™ng (depth=2 cho district c·ª• th·ªÉ)
    fun loadWards(districtCode: String) {
        viewModelScope.launch {
            try {
                val district = apiService.getDistrictByCode(districtCode) // API: /api/d/{districtCode}?depth=2
                _wards.value = district.wards ?: emptyList()
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load x√£: ${e.message}")
            }
        }
    }

}