package com.example.appmuabandocu.feature_home.ui
import ProductViewModel
import android.util.Log
import android.widget.ImageButton
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.font.FontWeight.Companion.Bold
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import coil.compose.rememberImagePainter
import com.example.appmuabandocu.R
import com.example.appmuabandocu.ui.theme.Blue_text
import coil.compose.AsyncImage


@Composable
fun HomeScreen(modifier: Modifier = Modifier, navController: NavController, viewModel: ProductViewModel = viewModel()) {
    val products = viewModel.productList

    // Log ƒë·ªÉ ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m
    LaunchedEffect(products) {
        Log.d("HomeScreen", "S·∫£n ph·∫©m: ${products.size} s·∫£n ph·∫©m")
    }
    Box(
        modifier = modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Image(
            modifier = Modifier.fillMaxSize().matchParentSize(),
            painter = painterResource(id = R.drawable.bg2_screen),
            contentDescription = "Home Screen",
            contentScale = ContentScale.FillBounds // c·∫Øt ·∫£nh v·ª´a khung h√¨nh
        )
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Ti√™u ƒë·ªÅ trang
            Text(
                text = "Thanh l√Ω nhanh",
                fontSize = 22.sp,
                fontWeight = FontWeight.Bold,
                color = Blue_text,
                modifier = Modifier.padding(10.dp).fillMaxWidth()
            )

            // T√¨m ki·∫øm
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 10.dp, end = 10.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                var SearchText = remember { mutableStateOf("") }
                OutlinedTextField(
                    value = SearchText.value,
                    onValueChange = { SearchText.value = it },
                    placeholder = { Text("B·∫°n mu·ªën mua g√¨ ?", fontSize = 12.sp) },
                    colors = TextFieldDefaults.colors(
                        focusedTextColor = Color.Black,
                        focusedIndicatorColor = Blue_text,
                        unfocusedIndicatorColor = Blue_text,
                        unfocusedContainerColor = Color.White,
                    ),
                    modifier = Modifier.height(50.dp).weight(1f)
                )
                Spacer(modifier = Modifier.width(10.dp))
                IconButton(
                    modifier = Modifier
                        .border(2.dp, Color.White, RoundedCornerShape(10.dp)),
                    onClick = { /* X·ª≠ l√Ω t√¨m ki·∫øm */ }
                ) {
                    Icon(
                        imageVector = Icons.Default.Search,
                        contentDescription = "Search",
                        modifier = Modifier.size(40.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(10.dp))

            // Danh m·ª•c s·∫£n ph·∫©m
            Row(
                horizontalArrangement = Arrangement.SpaceEvenly,
                modifier = Modifier.fillMaxWidth()
            ) {
                CategoryItem("ƒê·ªì ƒëi·ªán t·ª≠", R.drawable.ic_phone)
                CategoryItem("Xe m√°y", R.drawable.ic_xemay)
                CategoryItem("Th·ªùi trang", R.drawable.ic_aoo)
                CategoryItem("ƒê·ªì gia d·ª•ng", R.drawable.ic_noicom)
                CategoryItem("Kh√°c", R.drawable.ic_condit)
            }

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.Center
            ) {
                if (products.isEmpty()) {
                    Text("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o")
                } else {
                    // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
                    LazyVerticalGrid(
                        columns = GridCells.Fixed(2), // Chia 2 c·ªôt
                        modifier = Modifier.padding(8.dp)
                    ) {
                        items(products) { product ->
                            ProductItem(
                                name = product.productName,
                                price = product.price,
                                imageUrl = product.imageUrl // Gi·∫£ s·ª≠ b·∫°n c√≥ link ·∫£nh
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun CategoryItem(title: String, imageRes: Int) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = Modifier
                .size(50.dp) // K√≠ch th∆∞·ªõc khung tr√≤n
                .clip(CircleShape)
                .background(Color.White)
                .border(1.dp, Color.Black, CircleShape),
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = imageRes),
                contentDescription = null,
                modifier = Modifier.size(30.dp), // üëà Thu nh·ªè h√¨nh ·∫£nh b√™n trong
                contentScale = ContentScale.Fit
            )
        }

        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = title,
            fontSize = 10.sp,
            textAlign = TextAlign.Center
        )
    }
}


@Composable
fun ProductItem(name: String, price: String, imageUrl: String) {
    Column(
        modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .clip(RoundedCornerShape(8.dp))
            .background(Color.White)
            .border(1.dp, Color.LightGray, RoundedCornerShape(8.dp))
    ) {
        // H√¨nh ·∫£nh s·∫£n ph·∫©m
        AsyncImage(
            model = imageUrl,
            contentDescription = "Product Image",
            contentScale = ContentScale.Crop,
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
                .clip(RoundedCornerShape(topStart = 8.dp, topEnd = 8.dp)),
            placeholder = painterResource(id = R.drawable.ic_noicom), // Th√™m ·∫£nh placeholder
            error = painterResource(id = R.drawable.ic_xemay), // Th√™m ·∫£nh khi c√≥ l·ªói t·∫£i ·∫£nh
        )

        Spacer(modifier = Modifier.height(8.dp))

        // T√™n v√† gi√°
        Column(modifier = Modifier.padding(horizontal = 8.dp)) {
            Text(
                text = name,
                fontWeight = FontWeight.Bold,
                fontSize = 14.sp,
                maxLines = 2,

            )

            Text(
                text = "Gi√°: $price",
                color = Color.Gray,
                fontSize = 12.sp,
                modifier = Modifier.padding(top = 4.dp)
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        // N√∫t li√™n h·ªá
        Button(
            onClick = { /* TODO: x·ª≠ l√Ω li√™n h·ªá */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(40.dp)
                .padding(horizontal = 8.dp),
            shape = RoundedCornerShape(6.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Blue_text)
        ) {
            Text(
                text = "Li√™n h·ªá",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color.White // ƒê·∫£m b·∫£o ch·ªØ c√≥ m√†u tr·∫Øng
            )
        }

        Spacer(modifier = Modifier.height(8.dp))
    }
}

