
import android.util.Log
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.appmuabandocu.data.District
import com.example.appmuabandocu.data.Product
import com.example.appmuabandocu.data.Province
import com.example.appmuabandocu.data.Ward
import com.example.appmuabandocu.repository.ProductRepository
import com.example.thuchanhapi.api.ApiClient
import com.example.thuchanhapi.api.ApiService
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.ValueEventListener
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.util.Date
import kotlin.getValue
import kotlin.setValue

class ProductViewModel : ViewModel() {

    private val _productList = mutableStateListOf<Product>()
    val productList: List<Product> get() = _productList

    private val db: DatabaseReference = FirebaseDatabase.getInstance().getReference("products")

    val isLoading = mutableStateOf(false)
    val errorMessage = mutableStateOf<String?>(null)

    private val _message = MutableStateFlow("")
    val message: StateFlow<String> = _message

    private val _isRefreshing = MutableStateFlow(false)
    val isRefreshing: StateFlow<Boolean> = _isRefreshing


    // Repository cho API ƒë·ªãa ch·ªâ h√†nh ch√≠nh
    private val productRepository = ProductRepository(apiService = ApiClient.provinceService)

    // StateFlow cho t·ªânh, huy·ªán, x√£
    private val _provinces = MutableStateFlow<List<Province>>(emptyList())
    val provinces: StateFlow<List<Province>> = _provinces

    private val _districts = MutableStateFlow<List<District>>(emptyList())
    val districts: StateFlow<List<District>> = _districts

    private val _wards = MutableStateFlow<List<Ward>>(emptyList())
    val wards: StateFlow<List<Ward>> = _wards

    init {
        loadProductsRealtime()
        loadProvinces() // üü¢ Load danh s√°ch t·ªânh khi ViewModel kh·ªüi t·∫°o
    }

    private val _productsByCategory = MutableStateFlow<List<Product>>(emptyList())
    val productsByCategory: StateFlow<List<Product>> = _productsByCategory

    // üü¢ Load t·ªânh
    fun loadProvinces() {
        viewModelScope.launch {
            try {
                val response = productRepository.getProvinces()
                _provinces.value = response
                if (response.isNotEmpty()) {
                    loadDistricts(response[0].code.toString()) // T·ª± ƒë·ªông load qu·∫≠n c·ªßa t·ªânh ƒë·∫ßu ti√™n
                } else {
                    Log.e("ViewModel", "Danh s√°ch t·ªânh tr·ªëng")
                }
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load t·ªânh: ${e.message}")
            }
        }
    }

    // üü¢ Load qu·∫≠n/huy·ªán b·∫±ng API ri√™ng (depth=2 cho province c·ª• th·ªÉ)
    fun loadDistricts(provinceCode: String) {
        viewModelScope.launch {
            try {
                val province = productRepository.getProvinceByCode(provinceCode) // API: /api/p/{provinceCode}?depth=2
                _districts.value = province.districts ?: emptyList()

                if (_districts.value.isNotEmpty()) {
                    loadWards(_districts.value[0].code.toString())
                }
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load huy·ªán: ${e.message}")
            }
        }
    }

    // üü¢ Load x√£/ph∆∞·ªùng b·∫±ng API ri√™ng (depth=2 cho district c·ª• th·ªÉ)
    fun loadWards(districtCode: String) {
        viewModelScope.launch {
            try {
                val district = productRepository.getDistrictByCode(districtCode) // API: /api/d/{districtCode}?depth=2
                _wards.value = district.wards ?: emptyList()
            } catch (e: Exception) {
                Log.e("ViewModel", "L·ªói load x√£: ${e.message}")
            }
        }
    }



    // T·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ Firebase Realtime Database
    fun loadProductsRealtime() {
        isLoading.value = true

        db.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val newProducts = mutableListOf<Product>()
                snapshot.children.forEach { childSnapshot ->
                    val product = childSnapshot.getValue(Product::class.java)
                    product?.let { newProducts.add(it) }
                }
                _productList.clear()
                _productList.addAll(newProducts)
                isLoading.value = false
                Log.d("RealtimeDatabase", "D·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c!")
            }

            override fun onCancelled(error: DatabaseError) {
                isLoading.value = false
                errorMessage.value = "L·ªói khi t·∫£i d·ªØ li·ªáu realtime: ${error.message}"
                Log.e("RealtimeDatabase", "L·ªói realtime: ", error.toException())
            }
        })
    }


    // ƒêƒÉng s·∫£n ph·∫©m m·ªõi l√™n Firebase
    fun postProduct(product: Product) {
        val userId = FirebaseAuth.getInstance().currentUser?.uid
        val productWithTimeAndStock = product.copy(
            timestamp = Date().time,
            inStock = true
        )

        if (userId != null) {
            val productRef = db.push() // t·∫°o node m·ªõi, t·ª± sinh id
            val productId = productRef.key ?: return

            // G√°n userId v√† id v√†o product
            val productData = product.copy(
                id = productId,
                userId = userId,
                timestamp = Date().time,
                inStock = true
            )

            productRef.setValue(productData)
                .addOnSuccessListener {
                    Log.d("RealtimeDatabase", "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!")
                    _message.value = "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!"
                    loadProductsRealtime()
                }
                .addOnFailureListener { e ->
                    errorMessage.value = "L·ªói ƒëƒÉng s·∫£n ph·∫©m: ${e.message}"
                    Log.e("RealtimeDatabase", "L·ªói ƒëƒÉng s·∫£n ph·∫©m: ", e)
                    _message.value = "L·ªói ƒëƒÉng s·∫£n ph·∫©m: ${e.message}"
                }
        } else {
            errorMessage.value = "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p!"
            Log.e("RealtimeDatabase", "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p!")
            _message.value = "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p!"
        }
    }


    // H√†m ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ·∫©n/hi·ªán c·ªßa m·ªôt s·∫£n ph·∫©m
    fun toggleProductVisibility(productId: String) {
        _productList.find { it.id == productId }?.let {
            val updatedProduct = it.copy(displayed = it.displayed?.not()) // ƒê·∫£o tr·∫°ng th√°i hi·ªÉn th·ªã
            _productList[_productList.indexOf(it)] = updatedProduct
        }
    }

    // H√†m ƒë·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m (ch·ªâ tr·∫£ v·ªÅ s·∫£n ph·∫©m kh√¥ng b·ªã ·∫©n)
    fun getVisibleProducts(): List<Product> {
        return _productList.filter { it.displayed == true }
    }

    // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m (v√≠ d·ª•: g·ªçi t·ª´ Firestore)
    fun setProductList(products: List<Product>) {
        _productList.clear()
        _productList.addAll(products)
    }

    fun refreshProducts() {
        viewModelScope.launch {
            _isRefreshing.value = true
            // Gi·∫£ s·ª≠ g·ªçi l·∫°i API ho·∫∑c Firebase
            loadProductsRealtime() // ho·∫∑c loadVisibleProducts()
            delay(1000) // delay 1s ƒë·ªÉ hi·ªÉn th·ªã hi·ªáu ·ª©ng r√µ r√†ng (t√πy)
            _isRefreshing.value = false
        }
    }
    fun getProductsByCategory(category: String) {
        val dbRef = FirebaseDatabase.getInstance().getReference("products")

        dbRef.orderByChild("category").equalTo(category)
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val productList = mutableListOf<Product>()
                    for (child in snapshot.children) {
                        val product = child.getValue(Product::class.java)
                        product?.let { productList.add(it) }
                    }
                    _productsByCategory.value = productList
                }

                override fun onCancelled(error: DatabaseError) {
                    // Handle error
                }
            })
    }


}

